{
    "contents" : "\n#'##############################################################\n#' learning function. It prepares the creation of the object of \n#' MampcSearch and once create calls the method for running the\n#' learning algorithm\n#' arguments\n#' @param pathnet path to nets\n#' @param pathdb path to ddbb\n#' @param netName net name\n#' @param dbId ddbb id to learn from\n#' @param numberSamples number of samples of the ddbb to analyze\n#' @param moral way to consider v-structures\n#' @param pc flag to show the algorithm to use (mampc or pc)\n#' @param netExt specify the origin of the true net (bn or mamp graph)\n#' @param debug flag to activate/deactivate the use of debug messages\n#'##############################################################\nlearn <- function(pathnet, pathdb, netName, dbId, numberSamples, moral, pc, netExt, debug){\n  # sets edges and net to null\n  edges <- NULL\n  net <- NULL\n  \n  # the true net is a a real BN\n  if (netExt == \"net\"){\n    # compose the name of the net\n    netFileName <- paste(pathnet,netName,sep=\"\")\n    netFileName <- paste(netFileName,\".net\",sep=\"\")\n    \n    # reads the net\n    net <- read.net(netFileName,FALSE)\n    if (debug){\n      cat(\"Read information of true net..................\\n\")\n    }\n  }\n  else{\n    # read edges from a RDS file (it is a mamp graph and can not be \n    # described with a BN)\n    edgesFileName <- paste(pathnet, netName,sep=\"\")\n    edgesFileName <- paste(edgesFileName, \".mampcg\", sep=\"\")\n    \n    # read the RDS file with model information\n    model <- readRDS(edgesFileName)\n    if (debug){\n      cat(\"Read information about edges: number of nodes = \",\n                                          length(bnlearn::nodes(model$bnet)),\"\\n\")\n      cat(\"number of edges = \",nrow(model$edges),\"\\n\")\n    }\n    \n    # sets net and edges\n    net <- model$bnet \n    edges <- model$edges\n  }\n  \n  # compose the name of the database to analyze\n  # As an example: alarm-1000-10.db it would be the name\n  # of a database generated from alarm netwotk, with 1000 \n  # samples and being the variant number 10 for this net \n  # and number of samples\n  dbName <- paste(netName,\"-\",sep=\"\")\n  dbName <- paste(dbName,numberSamples,sep=\"\")\n  dbName <- paste(dbName,\"-\",sep=\"\")\n  dbName <- paste(dbName,dbId,sep=\"\")\n  dbName <- paste(dbName,\".db\",sep=\"\")\n  dbCompleteName <- paste(pathdb,dbName,sep=\"\")\n  \n  # reads the data base to analyze\n  db <- readDataBase(dbCompleteName, netExt)\n  if (debug){\n    cat(\"Read ddbb: \",dbCompleteName,\"\\n\")\n  }\n  \n  # now it is time to learn. For this purpose is required to create\n  # an object on MampcSearch, passign as arguments the net, data base,\n  # moral flag, pc flag, set of edges (null if the initial net is a BN)\n  # and debug flag\n  bInfo <- buildObject(net, db, moral=moral, pc=pc, edges=edges, debug=debug)\n  \n  # calls the method devoted to execute the learning algorithm\n  bInfo$learn()\n  \n  # return bInfo\n  return(bInfo)\n}\n\n#'##############################################################\n#' This function defines the execution of the learning algorithm\n#' arguments:\n#' @param pathnet: path to nets\n#' @param pathdbsample: path to ddbbs\n#' @param netName: net name\n#' @param dbId: variant to consider (each ddbb is identified with a different id)\n#' @param samples: number of samples of the ddbb to consider\n#' @param mode: mode of composing the true net (from a BN defined in a net file\n#'        of from a rds file with the definition of the edges in case of a mamp\n#'        graph) \n#' @param debug: flag to show if trace messages must be used or not\n#'##############################################################\nexecute <- function(pathnet, pathdbsample, netName, dbId, samples, mode, debug){\n  # sets model and modelPC (the results of the learning algorithm\n  # to NULL)\n  model <- NULL\n  modelPC <- NULL\n\n  if (debug){\n    cat(\"Learning from variant: \",dbId,\"\\n\")\n  }\n\n  # learn the model with mampc algorithm. By default debug mode is. The basic\n  # function learn is defined in the file learn.R\n  try(model <- learn(pathnet,pathdbsample,netName,dbId,samples,moral=FALSE, \n                     pc=FALSE, mode, debug))\n  \n  if (debug){\n    cat (\"   learnt with mamp algorithm\\n\")\n  }\n\n  # learn the model with pc algorithm: only if mode is net (learning from \n  # Bayesian networks)\n  if (mode == \"net\"){\n    try(modelPC <- learn(pathnet,pathdbsample,netName,dbId,samples,moral=FALSE, \n                         pc=TRUE,mode,debug))\n  \n    if (debug){\n      cat(\"    learnt with pc algorithm\\n\")\n    }\n  }\n\n  # compare learnt models against the true model\n  # first compare the model learnt with mampc algorithm\n  if (!is.null(model)){\n    vs <- model$compareStructure()\n  }\n  else{\n    # if the algorithm was no able to finish, considers NA as values\n    # for recall, precision, recallVs and precisionVs\n    vs <- list(recall=NA, precision=NA, recallVs=NA, precisionVs=NA)\n  }\n\n  # store the results of the comparison: this method is defined in utilResults.R\n  # script\n  storeNetResults(netName, \"mampcg\", samples, dbId, c(vs$recall,vs$precision,\n                                                      vs$recallVs, vs$precisionVs))\n\n  # now compares result pf pc algorithm and true net\n  if (!is.null(modelPC)){\n    vsPC <- modelPC$compareStructure()\n  }\n  else{\n    # if the algorithm was no able to finish, considers NA as values\n    # for recall, precision, recallVs and precisionVs\n    vsPC <- list(recall=NA, precision=NA, recallVs=NA, precisionVs=NA)\n  }\n\n  # store the results of the comparison: this method is defined in utilResults.R\n  # script\n  storeNetResults(netName, \"pc\", samples, dbId, c(vsPC$recall,vsPC$precision,\n                                                  vsPC$recallVs, vsPC$precisionVs))\n\n  # return the results of the comparison\n  return(c(vs$recall, vs$precision, vs$recallVs, vs$precisionVs, \n           vsPC$recall, vsPC$precision, vsPC$recallVs, vsPC$precisionVs))\n}\n",
    "created" : 1445327978783.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2536292140",
    "id" : "47F0FEBB",
    "lastKnownWriteTime" : 1445351883,
    "path" : "~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R",
    "project_path" : "R/executeExperiment.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : true,
    "type" : "r_source"
}