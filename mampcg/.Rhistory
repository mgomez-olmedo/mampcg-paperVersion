source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/execute-experiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/processResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/processResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/significanceTest.R')
install.packages(c("class", "data.table", "earth", "foreign", "MASS", "nlme", "nnet", "rpart.plot", "spatial"))
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDataBasesBN.R')
a <- 3
x <- "a > 2"
eval(parse(text=x))
data(gaussian.test)
fitted = bn.fit(hc(gaussian.test), gaussian.test)
library(bnlearn)
data(gaussian.test)
fitted = bn.fit(hc(gaussian.test), gaussian.test)
cpquery(fitted,
event = ((A >= 0) & (A <= 1)) & ((B >= 0) & (B <= 3)),
evidence = (C + D < 10))
evidenceExpression <- "C + D < 10"
cpquery(fitted,
event = ((A >= 0) & (A <= 1)) & ((B >= 0) & (B <= 3)),
evidence = eval(parse(evidenceExpression)))
cpquery(fitted,
event = ((A >= 0) & (A <= 1)) & ((B >= 0) & (B <= 3)),
evidence = eval(parse(text=evidenceExpression)))
cpdist(fitted, "A", (C == "c"))
cpdist(fitted, "A", evidence=(C < 0.2))
cpdist(fitted, "A", evidence=(C < 0.2))
evidenceExpresion <- "C < 0.2"
cpdist(fitted, "A", evidence=(eval(parse(text=evidenceExpression))))
edges <- readRDS("artificial1.edges-rds")
edges <- readRDS("./networks/artificial1.edges-rds")
edges
result <- transformToBayesianNetwork(edges)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R', echo=TRUE)
result <- transformToBayesianNetwork(edges)
bnet <- createBnlearnNet(result$edges, TRUE)
distributionsRootNodes <- generateDistributionForRootNodes(bnet)
distributionsNonRootNodes <- generateDistributionForNonRootNodes(bnet)
distributions <- c(distributionsRootNodes, distributionsNonRootNodes)
net <- setParameters(bnet, distributions)
inmoralities <- result$inmoralities
inmoralities
evidenceExpresion <- ""
for (i in 1:length(inmoralities)){}
for (i in 1:length(inmoralities)){
}
str=paste("(",inmoralities, " > 0 )", sep="", collapse = "&")
str
str=paste("(",inmoralities, " > 0.2 )", sep="", collapse = "&")
data <- cpdist(net, nodes=nodes(net), evidence=eval(parse(text=str)))
data
str=paste("(",inmoralities, " >=", 0.2, "")", sep="", collapse = "&")
for (i in 1:length(inmoralities)){
}
inmoralities
express <- lapply(inmoralities, function(node) { exp <- paste(node,0.2,sep=">="})
express <- lapply(inmoralities, function(node) { exp <- paste(node,0.2,sep=">=")})
express
express <- lapply(inmoralities, function(node) { expB <- paste(node,0.2,sep=">=") expL <- paste(node,0.2,"<=") exp <- paste0 })
inmoralities
evidenceExpression <- lapply(inmoralities, function(node){
expB <- paste0("(",node)
expB <- paste0(expB, " >= ")
expB <- paste0(expB, threshold)
expB <- paste0(expB, ")")
expL <- paste0("(",node)
expL <- paste0(expL, " <= ")
expL <- paste0(expL, threshold)
expL <- paste0(expL, ")")
})
threshold <- 0.2
evidenceExpression <- lapply(inmoralities, function(node){
expB <- paste0("(",node)
expB <- paste0(expB, " >= ")
expB <- paste0(expB, threshold)
expB <- paste0(expB, ")")
expL <- paste0("(",node)
expL <- paste0(expL, " <= ")
expL <- paste0(expL, threshold)
expL <- paste0(expL, ")")
})
evidenceExpression
evidenceExpression <- lapply(inmoralities, function(node){
expB <- paste0("(",node)
expB <- paste0(expB, " >= ")
expB <- paste0(expB, threshold)
expB <- paste0(expB, ")")
expL <- paste0("(",node)
expL <- paste0(expL, " <= ")
expL <- paste0(expL, threshold)
expL <- paste0(expL, ")")
c(expB, expL)
})
evidenceExpression
str <- paste(evidenceExpression,"",sep="",collapse="&")
str
str <- paste(" ",evidenceExpression," ",sep="",collapse="&")
str
str1=paste("(",inmoralities," >=", threshold, sep="",collapse="&")
str1
strB=paste("(",inmoralities, " >= ", threshold, ")", sep="", collapse = "&")
strB
strB=paste("(",inmoralities, " >= ", threshold, ")", sep=" ", collapse = "&")
strB
strB=paste("(",inmoralities, " >= ", threshold, ")", sep="", collapse = " & ")
strB
strB=paste("(",inmoralities, " >= ", -threshold, ")", sep="", collapse = " & ")
strL=paste("(",inmoralities, " <= ", threshold, ")", sep="", collapse = " & ")
strB
strL
strC <- paste(strB,strL, sep=" & ")
strC
data <- cpdist(net, nodes=nodes(net), evidence=eval(parse(text=strC)))
data
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
graphModel <- generateRandomMAMPCG(numberNodes, edgesProbs[[1]])
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
storeModel(completeModel,pathNet)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
variants <- 2
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb)
completeModel$bnet
nodes(completeModel$bnet)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb)
model <- completeModel
strB=paste("(",model$inmoralities, " >= ", -threshold, ")", sep="", collapse = " & ")
strL=paste("(",model$inmoralities, " <= ", threshold, ")", sep="", collapse = " & ")
strC=paste(strB, strL, sep=" & ")
eval(parse(text=strC))
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=50000, n=sampleSize*30000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=50000, n=1000*30000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=5000, n=1000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=5000, n=1000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
nodes(model$bnet)
strC
install.packages(c("doParallel", "foreach", "irlba", "iterators", "randomForest", "rmarkdown", "testthat"))
strC
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c((errorME >= -0.2) & (errorJC >= -0.2) & (errorBE >= -0.2) & (errorME <= 0.2) & (errorJC <= 0.2) & (errorBE <= 0.2)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c((errorME >= -0.2) & (errorJC >= -0.2) & (errorBE >= -0.2) & (errorME <= 0.2) & (errorJC <= 0.2) & (errorBE <= 0.2)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c((errorME >= -0.2) & (errorJC >= -0.2) & (errorBE >= -0.2) & (errorME <= 0.2) & (errorJC <= 0.2) & (errorBE <= 0.2)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=1000)
dataf
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c((errorME >= -0.2) & (errorJC >= -0.2) & (errorBE >= -0.2) & (errorME <= 0.2) & (errorJC <= 0.2) & (errorBE <= 0.2)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
dataf
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c(eval(parse(text=strC))),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
strC
parse(text=strC)
parse(text=strC)
eval(parse(text=strC))
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=strC)),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
parse(strC)
evidenceExpression <- strC
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=evidenceExpression,
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidenceExpression,
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
evidenceExpression
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c(evidenceExpression),
method="ls", debug=FALSE, cluster=cl,
batch=500, n=10000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=c(evidenceExpression),
method="ls", debug=FALSE, batch=500, n=10000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(evidenceExpression)),
method="ls", debug=FALSE, batch=500, n=10000)
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=evidenceExpression)),
method="ls", debug=FALSE, batch=500, n=10000)
dataf
clusterExport(cl, strC)
strC
cl
clusterExport(cl, strC)
clusterExport(cl, eval(parse(text=evidenceExpression)))
clusterExport(cl, evidenceExpression)
clusterExport(cl, "evidenceExpression")
dataf <- cpdist(model$bnet, nodes=nodes(model$bnet), evidence=eval(parse(text=evidenceExpression)),
method="ls", cluster=cl, debug=FALSE, batch=500, n=10000)
dataf
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb,cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb,cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
pathDb <- "./ddbb/"
pathNet <- "./networks/"
baseFileName <- "artificial"
#sampleSizes <- c(500, 1000, 5000, 10000, 50000)
sampleSizes <- c(500)
# these are the probs for directed, undirected and bidirected used for
# artificial1, artificial2 and artificial3 respectively
edgesProbs <- list(c(0.2, 0.2, 0.6), c(0.2, 0.6, 0.2), c(0.6, 0.2, 0.2))
numberNets <- 3
numberNodes <- 15
variants <- 30
# This parameter defines the threshold used for the evidence. We have
# used 0.2 for artificial1 and artificial3 and 0.9 for artificial2
threshold <- 0.2
set.seed(123)
cl=makeCluster(2)
graphModel <- generateRandomMAMPCG(numberNodes, edgesProbs[[1]])
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
storeModel(completeModel,pathNet)
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb, cl)
completeModel$name
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb, cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb, cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb, cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
variants <- 5
generateDataSets(completeModel, variants, sampleSizes, threshold, pathDb, cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateRandomGraphs.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDataBasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
completeModel <- retrieveModel("artificial1",pathNet)
completeMode$name
completeModel$name
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
generateDatabases(completeModel, variants, sampleSizes, threshold, pathDb, cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
stopCLuster(cl)
stopCluster(cl)
stopCluster(cl)
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
model <- readRDS("./artificial1.edges-red")
model <- readRDS("./artificial1.edges-rds")
completeModel <- prepareMAMPCGForSampling(model, baseFileName, pathNet)
storeModel(completeModel,"./networks/artificial1.mampcg")
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/auxiliarFunctions.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
debugSource('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
debugSource('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/auxiliarFunctions.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/testExecuteExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/MampcSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/auxiliarFunctions.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/generateDatabasesBN.R')
source('~/desarrollo/jmpenna/aprendizaje/versionPublica/version-dropbox-3/mampcg/R/utilResults.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
graphModel <- readRDS("./artificia1.edges-rds")
graphModel <- readRDS("../artificia1.edges-rds")
graphModel <- readRDS("artificia1.edges-rds")
graphModel <- readRDS("../artificia1.edges-rds")
graphModel <- readRDS("~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/artificia1.edges-rds")
graphModel <- readRDS("~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/artificia1.edges-rds")
!pwd
pwd()
pwd
graphModel <- readRDS("../artificia1.edges-rds")
graphModel <- readRDS("../artificia1.edges-rds")
graphModel <- readRDS("./artificia1.edges-rds")
graphModel <- readRDS("artificia1.edges-rds")
pathDb <- "./ddbb/"
pathNet <- "./networks/"
baseFileName <- "artificial"
graphModel <- readRDS("artificia1.edges-rds")
graphModel <- readRDS("./artificia1.edges-rds")
graphModel <- readRDS("artificia1.edges-rds")
graphModel <- readRDS("artificial1.edges-rds")
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/generateMAMPCG.R')
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
completeModel$bnet
sink()
sink()
nodes(completeModel$bnet)
nodes(completeModel$bnetSampling)
storeModel(completeModel,pathNet)
graphModel <- readRDS("artificial2.edges-rds")
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
storeModel(completeModel,pathNet)
graphModel <- readRDS("artificial3.edges-rds")
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
storeModel(completeModel,pathNet)
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
model1 <- readRDS("./networks/artificial1.mampcg")
nodes(model1$bnetSampleing)
nodes(model1$bnetSampling)
bnlear::nodes(model1$bnetSampling)
bnlearn::nodes(model1$bnetSampling)
library(bnlearn)
bnlearn::nodes(model1$bnetSampling)
graphModel <- readRDS("artificial1.edges-rds")
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/generateMAMPCG.R')
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
pathdb <- "./ddbb/"
pathnet <- "./networks/"
# sets the name of the network to work with
netName <- "artificial1"
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathNet)
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathnet)
pathDb <- "./ddbb/"
pathNet <- "./networks/"
baseFileName <- "artificial"
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathnet)
completeModel$name
sink()
sink()
completeModel$name
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathnet)
completeModel$name
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathnet)
completeModel$name
storeModel(completeModel,pathNet)
model1 <- readRD("./networks/artificial1.mampcg")
model1 <- readRDS("./networks/artificial1.mampcg")
model1$name
nodes(model1$bnet)
nodes(model1$bnetSampling)
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/executeExperiment.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
warnings()
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
warnings()
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/MAMPCGSearch.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteMAMPCGExperiments.R')
graphModel <- readRDS("artificial2.edges-rds")
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathnet)
storeModel(completeModel,pathNet)
graphModel <- readRDS("artificial3.edges-rds")
completeModel <- prepareMAMPCGForSampling(graphModel, baseFileName, pathnet)
storeModel(completeModel,pathNet)
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testGenerateMAMPCG.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testExecuteComparisonExperiments.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
t.test(c(2,3,4),c(4,5,6),alt="two.sided",var.equal=TRUE)
try(t.test(c(2,3,4),c(4,5,6),alt="two.sided",var.equal=TRUE))
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/significanceTest.R')
source('~/desarrollo/jmpenna/aprendizaje/versionComentada/mampcg/R/testSignificanceTest.R')
